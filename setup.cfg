[metadata]
name = visualize_binary_scales
author = Matteo Bachetti
author_email = matteo@matteobachetti.it
license = BSD 3-Clause
license_files = licenses/LICENSE.rst
url = https://github.com/matteobachetti/visualize_binary_scales
description = Visualize the scales of a binary system, starting from orbital and spin parameters
long_description = file: README.rst
long_description_content_type = text/x-rst
edit_on_github = True
github_project = matteobachetti/visualize_binary_scales

[options]
zip_safe = False
packages = find:
python_requires = >=3.9
setup_requires = setuptools_scm
install_requires =
    astropy
    matplotlib
    pint
    numpy


[options.entry_points]
console_scripts =
    visualize_binary_scales = visualize_binary_scales.visualize:main


[options.extras_require]
test =
    pytest-astropy
docs =
    sphinx-astropy

[options.package_data]
visualize_binary_scales = data/*

[tool:pytest]
testpaths = "visualize_binary_scales" "docs"
astropy_header = true
doctest_plus = enabled
text_file_format = rst
addopts = --doctest-rst

[coverage:run]
omit =
    visualize_binary_scales/_astropy_init*
    visualize_binary_scales/conftest.py
    visualize_binary_scales/*setup_package*
    visualize_binary_scales/tests/*
    visualize_binary_scales/*/tests/*
    visualize_binary_scales/extern/*
    visualize_binary_scales/version*
    */visualize_binary_scales/_astropy_init*
    */visualize_binary_scales/conftest.py
    */visualize_binary_scales/*setup_package*
    */visualize_binary_scales/tests/*
    */visualize_binary_scales/*/tests/*
    */visualize_binary_scales/extern/*
    */visualize_binary_scales/version*

[coverage:report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    # Don't complain about packages we have installed
    except ImportError
    # Don't complain if tests don't hit assertions
    raise AssertionError
    raise NotImplementedError
    # Don't complain about script hooks
    def main\(.*\):
    # Ignore branches that don't pertain to this version of Python
    pragma: py{ignore_python_version}
    # Don't complain about IPython completion helper
    def _ipython_key_completions_
